{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNXTaaPQBooOixU8J0qIqou",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Maxxx-VS/The-Founder/blob/master/%D0%9F%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0%20%D0%B3%D0%B8%D0%BF%D0%BE%D1%82%D0%B5%D0%B7\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "wUyMjtSpsfbE"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import warnings\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import ast\n",
        "import plotly.express as px\n",
        "from bokeh.plotting import figure, show\n",
        "from bokeh.io import output_notebook\n",
        "from bokeh.models import ColumnarDataSource\n",
        "from bokeh.transform import factor_cmap\n",
        "from bokeh.palettes import Spectral10\n",
        "import altair as alt\n",
        "\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.options.display.float_format = \"{:,.2f}\".format"
      ],
      "metadata": {
        "id": "-HcmsW0QGK7K"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from requests import get\n",
        "response = get(\"https://storage.yandexcloud.net/academy.ai/the_movies_dataset.zip\")\n",
        "\n",
        "with open('the_movies_dataset.zip', 'wb') as f:\n",
        "    for chunk in response.iter_content(chunk_size=8192):\n",
        "        f.write(chunk)\n",
        "\n",
        "!unzip -qo \"the_movies_dataset.zip\" -d ./the_movies_dataset\n",
        "\n",
        "FILE_PATH = './the_movies_dataset'\n",
        "\n",
        "df = pd.read_csv(f'{FILE_PATH}/movies_metadata.csv')\n",
        "df.columns"
      ],
      "metadata": {
        "id": "yMkd3qgmGbyQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "61c2ed98-4c0d-4c44-a577-f45a22f5eb47"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['adult', 'belongs_to_collection', 'budget', 'genres', 'homepage', 'id',\n",
              "       'imdb_id', 'original_language', 'original_title', 'overview',\n",
              "       'popularity', 'poster_path', 'production_companies',\n",
              "       'production_countries', 'release_date', 'revenue', 'runtime',\n",
              "       'spoken_languages', 'status', 'tagline', 'title', 'video',\n",
              "       'vote_average', 'vote_count'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "pYi6I3RYs1No",
        "outputId": "6317848e-2999-4635-d188-55729238b7a0",
        "collapsed": true
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   adult                              belongs_to_collection    budget  \\\n",
              "0  False  {'id': 10194, 'name': 'Toy Story Collection', ...  30000000   \n",
              "1  False                                                NaN  65000000   \n",
              "2  False  {'id': 119050, 'name': 'Grumpy Old Men Collect...         0   \n",
              "\n",
              "                                              genres  \\\n",
              "0  [{'id': 16, 'name': 'Animation'}, {'id': 35, '...   \n",
              "1  [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...   \n",
              "2  [{'id': 10749, 'name': 'Romance'}, {'id': 35, ...   \n",
              "\n",
              "                               homepage     id    imdb_id original_language  \\\n",
              "0  http://toystory.disney.com/toy-story    862  tt0114709                en   \n",
              "1                                   NaN   8844  tt0113497                en   \n",
              "2                                   NaN  15602  tt0113228                en   \n",
              "\n",
              "     original_title                                           overview  ...  \\\n",
              "0         Toy Story  Led by Woody, Andy's toys live happily in his ...  ...   \n",
              "1           Jumanji  When siblings Judy and Peter discover an encha...  ...   \n",
              "2  Grumpier Old Men  A family wedding reignites the ancient feud be...  ...   \n",
              "\n",
              "  release_date        revenue runtime  \\\n",
              "0   1995-10-30 373,554,033.00   81.00   \n",
              "1   1995-12-15 262,797,249.00  104.00   \n",
              "2   1995-12-22           0.00  101.00   \n",
              "\n",
              "                                    spoken_languages    status  \\\n",
              "0           [{'iso_639_1': 'en', 'name': 'English'}]  Released   \n",
              "1  [{'iso_639_1': 'en', 'name': 'English'}, {'iso...  Released   \n",
              "2           [{'iso_639_1': 'en', 'name': 'English'}]  Released   \n",
              "\n",
              "                                             tagline             title  video  \\\n",
              "0                                                NaN         Toy Story  False   \n",
              "1          Roll the dice and unleash the excitement!           Jumanji  False   \n",
              "2  Still Yelling. Still Fighting. Still Ready for...  Grumpier Old Men  False   \n",
              "\n",
              "  vote_average vote_count  \n",
              "0         7.70   5,415.00  \n",
              "1         6.90   2,413.00  \n",
              "2         6.50      92.00  \n",
              "\n",
              "[3 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-85b21919-4c71-47eb-9a6b-51c7c6e6e1a0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>adult</th>\n",
              "      <th>belongs_to_collection</th>\n",
              "      <th>budget</th>\n",
              "      <th>genres</th>\n",
              "      <th>homepage</th>\n",
              "      <th>id</th>\n",
              "      <th>imdb_id</th>\n",
              "      <th>original_language</th>\n",
              "      <th>original_title</th>\n",
              "      <th>overview</th>\n",
              "      <th>...</th>\n",
              "      <th>release_date</th>\n",
              "      <th>revenue</th>\n",
              "      <th>runtime</th>\n",
              "      <th>spoken_languages</th>\n",
              "      <th>status</th>\n",
              "      <th>tagline</th>\n",
              "      <th>title</th>\n",
              "      <th>video</th>\n",
              "      <th>vote_average</th>\n",
              "      <th>vote_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>{'id': 10194, 'name': 'Toy Story Collection', ...</td>\n",
              "      <td>30000000</td>\n",
              "      <td>[{'id': 16, 'name': 'Animation'}, {'id': 35, '...</td>\n",
              "      <td>http://toystory.disney.com/toy-story</td>\n",
              "      <td>862</td>\n",
              "      <td>tt0114709</td>\n",
              "      <td>en</td>\n",
              "      <td>Toy Story</td>\n",
              "      <td>Led by Woody, Andy's toys live happily in his ...</td>\n",
              "      <td>...</td>\n",
              "      <td>1995-10-30</td>\n",
              "      <td>373,554,033.00</td>\n",
              "      <td>81.00</td>\n",
              "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
              "      <td>Released</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Toy Story</td>\n",
              "      <td>False</td>\n",
              "      <td>7.70</td>\n",
              "      <td>5,415.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>65000000</td>\n",
              "      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 14, '...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8844</td>\n",
              "      <td>tt0113497</td>\n",
              "      <td>en</td>\n",
              "      <td>Jumanji</td>\n",
              "      <td>When siblings Judy and Peter discover an encha...</td>\n",
              "      <td>...</td>\n",
              "      <td>1995-12-15</td>\n",
              "      <td>262,797,249.00</td>\n",
              "      <td>104.00</td>\n",
              "      <td>[{'iso_639_1': 'en', 'name': 'English'}, {'iso...</td>\n",
              "      <td>Released</td>\n",
              "      <td>Roll the dice and unleash the excitement!</td>\n",
              "      <td>Jumanji</td>\n",
              "      <td>False</td>\n",
              "      <td>6.90</td>\n",
              "      <td>2,413.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>{'id': 119050, 'name': 'Grumpy Old Men Collect...</td>\n",
              "      <td>0</td>\n",
              "      <td>[{'id': 10749, 'name': 'Romance'}, {'id': 35, ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15602</td>\n",
              "      <td>tt0113228</td>\n",
              "      <td>en</td>\n",
              "      <td>Grumpier Old Men</td>\n",
              "      <td>A family wedding reignites the ancient feud be...</td>\n",
              "      <td>...</td>\n",
              "      <td>1995-12-22</td>\n",
              "      <td>0.00</td>\n",
              "      <td>101.00</td>\n",
              "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
              "      <td>Released</td>\n",
              "      <td>Still Yelling. Still Fighting. Still Ready for...</td>\n",
              "      <td>Grumpier Old Men</td>\n",
              "      <td>False</td>\n",
              "      <td>6.50</td>\n",
              "      <td>92.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3 rows × 24 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85b21919-4c71-47eb-9a6b-51c7c6e6e1a0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-85b21919-4c71-47eb-9a6b-51c7c6e6e1a0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-85b21919-4c71-47eb-9a6b-51c7c6e6e1a0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-048eb969-49a2-442f-9f1a-538c43404a4a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-048eb969-49a2-442f-9f1a-538c43404a4a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-048eb969-49a2-442f-9f1a-538c43404a4a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zi2Rnj_Rs9Yg",
        "outputId": "ac621616-884b-4f1e-f7fb-80e85095d383",
        "collapsed": true
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(45466, 24)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mOZhj8Kqs-hY",
        "outputId": "98556a69-6a76-42a1-e595-19f3fc9a1d38",
        "collapsed": true
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 45466 entries, 0 to 45465\n",
            "Data columns (total 24 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   adult                  45466 non-null  object \n",
            " 1   belongs_to_collection  4494 non-null   object \n",
            " 2   budget                 45466 non-null  object \n",
            " 3   genres                 45466 non-null  object \n",
            " 4   homepage               7782 non-null   object \n",
            " 5   id                     45466 non-null  object \n",
            " 6   imdb_id                45449 non-null  object \n",
            " 7   original_language      45455 non-null  object \n",
            " 8   original_title         45466 non-null  object \n",
            " 9   overview               44512 non-null  object \n",
            " 10  popularity             45461 non-null  object \n",
            " 11  poster_path            45080 non-null  object \n",
            " 12  production_companies   45463 non-null  object \n",
            " 13  production_countries   45463 non-null  object \n",
            " 14  release_date           45379 non-null  object \n",
            " 15  revenue                45460 non-null  float64\n",
            " 16  runtime                45203 non-null  float64\n",
            " 17  spoken_languages       45460 non-null  object \n",
            " 18  status                 45379 non-null  object \n",
            " 19  tagline                20412 non-null  object \n",
            " 20  title                  45460 non-null  object \n",
            " 21  video                  45460 non-null  object \n",
            " 22  vote_average           45460 non-null  float64\n",
            " 23  vote_count             45460 non-null  float64\n",
            "dtypes: float64(4), object(20)\n",
            "memory usage: 8.3+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop(['belongs_to_collection'], axis=1)\n",
        "df = df.drop(['homepage'], axis=1)\n",
        "df = df.drop(['video'], axis=1)\n",
        "df = df.drop(['poster_path'], axis=1)\n",
        "df = df.drop(['production_companies'], axis=1)\n",
        "df = df.drop(['imdb_id'], axis=1)\n",
        "df = df.drop(['adult'], axis=1)\n",
        "\n",
        "df['release_date'] = pd.to_datetime(df['release_date'], format='%Y-%m-%d', errors='coerce')\n",
        "\n",
        "df['weekday'] = df['release_date'].dt.day_name()\n",
        "\n",
        "df['budget'] = pd.to_numeric(df['budget'], errors='coerce')\n",
        "df['budget'] = df['budget'].replace(0, np.nan)"
      ],
      "metadata": {
        "id": "pHML3Le8tGqH"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().mean() * 100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 648
        },
        "id": "VLR-PJdtHjYG",
        "outputId": "c474f2d3-d183-4e15-8b38-81d1ad99242e"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "budget                 80.45\n",
              "genres                  0.00\n",
              "id                      0.00\n",
              "original_language       0.02\n",
              "original_title          0.00\n",
              "overview                2.10\n",
              "popularity              0.01\n",
              "production_countries    0.01\n",
              "release_date            0.20\n",
              "revenue                 0.01\n",
              "runtime                 0.58\n",
              "spoken_languages        0.01\n",
              "status                  0.19\n",
              "tagline                55.10\n",
              "title                   0.01\n",
              "vote_average            0.01\n",
              "vote_count              0.01\n",
              "weekday                 0.20\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>budget</th>\n",
              "      <td>80.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>genres</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>original_language</th>\n",
              "      <td>0.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>original_title</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>overview</th>\n",
              "      <td>2.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>popularity</th>\n",
              "      <td>0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>production_countries</th>\n",
              "      <td>0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_date</th>\n",
              "      <td>0.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>revenue</th>\n",
              "      <td>0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>runtime</th>\n",
              "      <td>0.58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>spoken_languages</th>\n",
              "      <td>0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>status</th>\n",
              "      <td>0.19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tagline</th>\n",
              "      <td>55.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>vote_average</th>\n",
              "      <td>0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>vote_count</th>\n",
              "      <td>0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weekday</th>\n",
              "      <td>0.20</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['genres'] = df['genres'].fillna(df['genres'].mode()[0])\n",
        "df['original_language'] = df['original_language'].fillna(df['original_language'].mode()[0])\n",
        "df['weekday'] = df['weekday'].fillna(df['weekday'].mode()[0])\n",
        "\n",
        "df = df.dropna(subset=['overview'])\n",
        "df = df.dropna(subset=['revenue'])\n",
        "\n",
        "df['release_date'] = df['release_date'].fillna(df['release_date'].mean())\n",
        "df['runtime'] = df['runtime'].fillna(df['runtime'].mean())\n",
        "\n",
        "df['budget'] = df['budget'].fillna(df['budget'].mean())"
      ],
      "metadata": {
        "id": "4DIGl_NcexmD"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().mean() * 100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 648
        },
        "id": "CIcKB4WqhlKa",
        "outputId": "b9d76c43-1d86-4c44-e9ac-c02185ccb61c"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "budget                  0.00\n",
              "genres                  0.00\n",
              "id                      0.00\n",
              "original_language       0.00\n",
              "original_title          0.00\n",
              "overview                0.00\n",
              "popularity              0.00\n",
              "production_countries    0.00\n",
              "release_date            0.00\n",
              "revenue                 0.00\n",
              "runtime                 0.00\n",
              "spoken_languages        0.00\n",
              "status                  0.15\n",
              "tagline                54.15\n",
              "title                   0.00\n",
              "vote_average            0.00\n",
              "vote_count              0.00\n",
              "weekday                 0.00\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>budget</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>genres</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>original_language</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>original_title</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>overview</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>popularity</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>production_countries</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_date</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>revenue</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>runtime</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>spoken_languages</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>status</th>\n",
              "      <td>0.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tagline</th>\n",
              "      <td>54.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>vote_average</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>vote_count</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weekday</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Гипотеза про пятницу\n",
        "df['weekday'].value_counts().plot(kind='bar', figsize=(3, 4), color='green')\n",
        "plt.title=\"Выпуск фильмов по дням недели\"\n",
        "plt.xlabel=\"Дни недели\"\n",
        "plt.ylabel=\"Количество релизов\"\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 454
        },
        "id": "cfh4xPtvhsYI",
        "outputId": "3560fab4-5c70-46e1-c2a2-536fe41d59fe"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Гипотеза про актеров 1\n",
        "df2 = pd.read_csv(f'{FILE_PATH}/credits.csv')\n",
        "df2.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0wXpvOgliydk",
        "outputId": "8f136726-b22d-469d-c643-71a7051c0e6a"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['cast', 'crew', 'id'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "MZJPCndkj-on",
        "outputId": "5997d9a6-d3da-428a-b6f8-9360384514f9"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                cast  \\\n",
              "0  [{'cast_id': 14, 'character': 'Woody (voice)',...   \n",
              "1  [{'cast_id': 1, 'character': 'Alan Parrish', '...   \n",
              "2  [{'cast_id': 2, 'character': 'Max Goldman', 'c...   \n",
              "\n",
              "                                                crew     id  \n",
              "0  [{'credit_id': '52fe4284c3a36847f8024f49', 'de...    862  \n",
              "1  [{'credit_id': '52fe44bfc3a36847f80a7cd1', 'de...   8844  \n",
              "2  [{'credit_id': '52fe466a9251416c75077a89', 'de...  15602  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7783e2e2-6d10-44fe-877f-e362ce99d061\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cast</th>\n",
              "      <th>crew</th>\n",
              "      <th>id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[{'cast_id': 14, 'character': 'Woody (voice)',...</td>\n",
              "      <td>[{'credit_id': '52fe4284c3a36847f8024f49', 'de...</td>\n",
              "      <td>862</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[{'cast_id': 1, 'character': 'Alan Parrish', '...</td>\n",
              "      <td>[{'credit_id': '52fe44bfc3a36847f80a7cd1', 'de...</td>\n",
              "      <td>8844</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[{'cast_id': 2, 'character': 'Max Goldman', 'c...</td>\n",
              "      <td>[{'credit_id': '52fe466a9251416c75077a89', 'de...</td>\n",
              "      <td>15602</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7783e2e2-6d10-44fe-877f-e362ce99d061')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7783e2e2-6d10-44fe-877f-e362ce99d061 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7783e2e2-6d10-44fe-877f-e362ce99d061');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4c8766fa-1585-4125-9d27-f6a4f9c5df9d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4c8766fa-1585-4125-9d27-f6a4f9c5df9d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4c8766fa-1585-4125-9d27-f6a4f9c5df9d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 45476,\n  \"fields\": [\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 43019,\n        \"samples\": [\n          \"[{'cast_id': 2, 'character': 'Lazar Peacock/Sabata', 'credit_id': '52fe4bca9251416c7510e195', 'gender': 2, 'id': 20581, 'name': 'Jack Betts', 'order': 0, 'profile_path': '/f03shMGYcbPG2EyjkIVAR0YA1RA.jpg'}, {'cast_id': 3, 'character': 'Blonde', 'credit_id': '52fe4bca9251416c7510e199', 'gender': 0, 'id': 100683, 'name': 'Franco Borelli', 'order': 1, 'profile_path': None}, {'cast_id': 4, 'character': 'Roger Murdock', 'credit_id': '52fe4bca9251416c7510e19d', 'gender': 2, 'id': 30898, 'name': 'Gordon Mitchell', 'order': 2, 'profile_path': '/szzvsqfFlkHBUJEiZtRquIhxHqn.jpg'}, {'cast_id': 5, 'character': 'Maya', 'credit_id': '52fe4bca9251416c7510e1a1', 'gender': 1, 'id': 30902, 'name': 'Simonetta Vitelli', 'order': 3, 'profile_path': '/jMnRUMgLV3l6lyB26bd8t9b11m5.jpg'}]\",\n          \"[{'cast_id': 2, 'character': 'Charles', 'credit_id': '590cf25dc3a36864c60039ff', 'gender': 2, 'id': 11276, 'name': 'Tim Pigott-Smith', 'order': 1, 'profile_path': '/yC5fQ2HYxzD5JqnXZKMJ6giExrU.jpg'}, {'cast_id': 3, 'character': 'Kate Middleton', 'credit_id': '590cf268c3a36864fc003a3b', 'gender': 1, 'id': 115679, 'name': 'Charlotte Riley', 'order': 2, 'profile_path': '/pkiZKysfb0oXvaBBm6zWQkWSvVu.jpg'}, {'cast_id': 4, 'character': 'William', 'credit_id': '590cf2769251414e85003b16', 'gender': 2, 'id': 31739, 'name': 'Oliver Chris', 'order': 3, 'profile_path': '/xTnUMtP5MREaHD86XfJ5mYibawq.jpg'}, {'cast_id': 5, 'character': 'Prime Minister Tristram Evans', 'credit_id': '590cf284c3a36864c6003a15', 'gender': 2, 'id': 47933, 'name': 'Adam James', 'order': 4, 'profile_path': '/4dSIRIEEnK2tC1OrgjEykUvOeFw.jpg'}, {'cast_id': 7, 'character': 'Harry', 'credit_id': '590cf2bd9251414e8d0038d1', 'gender': 0, 'id': 1409393, 'name': 'Richard Goulding', 'order': 6, 'profile_path': '/3vM6hrfcU4NLBvWoRxyo8nkPsDU.jpg'}, {'cast_id': 8, 'character': 'Coottsey', 'credit_id': '590cf2e5c3a36864ec0036e3', 'gender': 2, 'id': 1428460, 'name': 'Max Bennett', 'order': 7, 'profile_path': '/fthD8U3aGnQioWAiwvFPcdDQJRV.jpg'}, {'cast_id': 9, 'character': 'Jess', 'credit_id': '590ef2e29251414ead01c7d5', 'gender': 0, 'id': 1595457, 'name': 'Tamara Lawrance', 'order': 8, 'profile_path': None}, {'cast_id': 10, 'character': 'Camilla', 'credit_id': '590ef2f79251414eca01c988', 'gender': 1, 'id': 192933, 'name': 'Margot Leicester', 'order': 9, 'profile_path': '/M2PEeYUdkrd4VjI1D0lsHbiG8t.jpg'}, {'cast_id': 11, 'character': 'James Reiss', 'credit_id': '590ef30fc3a36864d401e229', 'gender': 2, 'id': 15740, 'name': 'Tim McMullan', 'order': 10, 'profile_path': '/8se9JhmD9LE6tiibkGiV51M8rdD.jpg'}, {'cast_id': 12, 'character': 'Mrs Stevens', 'credit_id': '590ef326c3a36864fc01d3f7', 'gender': 0, 'id': 62968, 'name': 'Priyanga Burford', 'order': 11, 'profile_path': '/yTxLb30QwUAs5aoErhnYsnGawG5.jpg'}, {'cast_id': 13, 'character': 'Diana', 'credit_id': '590ef334c3a36864fc01d3ff', 'gender': 1, 'id': 1528819, 'name': 'Katie Brayben', 'order': 12, 'profile_path': '/m7oOBu4cfamQ9wixTyWXNaH9sgn.jpg'}, {'cast_id': 14, 'character': 'Archbishop of Canterbury', 'credit_id': '590ef372c3a368650a01c818', 'gender': 2, 'id': 940, 'name': 'John Shrapnel', 'order': 13, 'profile_path': '/nDIK01IoVNx7cfYOrKqGugItqO9.jpg'}, {'cast_id': 15, 'character': 'Spencer', 'credit_id': '590ef37e9251414ead01c82c', 'gender': 0, 'id': 1455682, 'name': 'Parth Thakerar', 'order': 14, 'profile_path': None}]\",\n          \"[{'cast_id': 1, 'character': 'Himself', 'credit_id': '52fe4a9bc3a368484e15d20d', 'gender': 0, 'id': 1078721, 'name': 'Armand Leroi', 'order': 0, 'profile_path': None}]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"crew\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 44669,\n        \"samples\": [\n          \"[{'credit_id': '52fe461ac3a36847f80eccfd', 'department': 'Directing', 'gender': 2, 'id': 107463, 'job': 'Director', 'name': 'Del Tenney', 'profile_path': None}, {'credit_id': '52fe461ac3a36847f80ecd13', 'department': 'Writing', 'gender': 0, 'id': 107464, 'job': 'Screenplay', 'name': 'Richard Hilliard', 'profile_path': None}, {'credit_id': '52fe461ac3a36847f80ecd19', 'department': 'Production', 'gender': 2, 'id': 107463, 'job': 'Producer', 'name': 'Del Tenney', 'profile_path': None}]\",\n          \"[{'credit_id': '52fe45439251416c9102c5bd', 'department': 'Directing', 'gender': 2, 'id': 93975, 'job': 'Director', 'name': 'Lewis Allen', 'profile_path': None}, {'credit_id': '52fe45439251416c9102c5c3', 'department': 'Writing', 'gender': 0, 'id': 111580, 'job': 'Novel', 'name': 'Tiffany Thayer', 'profile_path': None}, {'credit_id': '52fe45439251416c9102c5c9', 'department': 'Writing', 'gender': 2, 'id': 10148, 'job': 'Writer', 'name': 'Warren Duff', 'profile_path': None}, {'credit_id': '52fe45439251416c9102c5cf', 'department': 'Production', 'gender': 2, 'id': 50311, 'job': 'Producer', 'name': 'Robert Fellows', 'profile_path': None}, {'credit_id': '52fe45439251416c9102c5d5', 'department': 'Sound', 'gender': 2, 'id': 26026, 'job': 'Original Music Composer', 'name': 'Victor Young', 'profile_path': None}, {'credit_id': '52fe45439251416c9102c5db', 'department': 'Camera', 'gender': 2, 'id': 8620, 'job': 'Director of Photography', 'name': 'John F. Seitz', 'profile_path': '/6hvivkKP5H5NpPcAViAfUMFgqsu.jpg'}, {'credit_id': '52fe45439251416c9102c5e1', 'department': 'Editing', 'gender': 2, 'id': 30013, 'job': 'Editor', 'name': 'LeRoy Stone', 'profile_path': None}]\",\n          \"[{'credit_id': '52fe45319251416c7504eab9', 'department': 'Writing', 'gender': 2, 'id': 14999, 'job': 'Screenplay', 'name': 'George A. Romero', 'profile_path': '/zNP7wdy48eNNJAAmM0pYbSelUAd.jpg'}, {'credit_id': '52fe45319251416c7504ea8b', 'department': 'Directing', 'gender': 2, 'id': 14999, 'job': 'Director', 'name': 'George A. Romero', 'profile_path': '/zNP7wdy48eNNJAAmM0pYbSelUAd.jpg'}]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 112443,\n        \"min\": 2,\n        \"max\": 469172,\n        \"num_unique_values\": 45432,\n        \"samples\": [\n          43942,\n          30139,\n          85389\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kMjag-FkkB57",
        "outputId": "4c3535e3-29b5-4d13-c4ca-1876e85acf9d"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(45476, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zSpO6Bk7kG5L",
        "outputId": "f7376ae8-390f-4b29-8aa7-eb7446d7f77e"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 45476 entries, 0 to 45475\n",
            "Data columns (total 3 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   cast    45476 non-null  object\n",
            " 1   crew    45476 non-null  object\n",
            " 2   id      45476 non-null  int64 \n",
            "dtypes: int64(1), object(2)\n",
            "memory usage: 1.0+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def convert_int(x):\n",
        "  try:\n",
        "    return int(x)\n",
        "  except:\n",
        "    return np.nan\n",
        "\n",
        "df['id'] = df['id'].apply(convert_int)\n",
        "df = df.drop(df[df['id'].isnull()].index)\n",
        "df['id'] = df['id'].astype('int')"
      ],
      "metadata": {
        "id": "MQN6RrKfksU8"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge = df.merge(df2, on='id')\n",
        "df_merge.shape\n",
        "df_merge['cast'] = df_merge['cast'].apply(ast.literal_eval)"
      ],
      "metadata": {
        "id": "_s0lTkEEmkf3"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_name(x):\n",
        "    for i in x:\n",
        "        if i['order'] == 0:\n",
        "            return i['name']\n",
        "    return np.nan\n",
        "\n",
        "df_merge['actor_name'] = df_merge['cast'].apply(get_name)"
      ],
      "metadata": {
        "id": "3yJx7QZonM1m"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge = df_merge[['actor_name', 'revenue', 'budget']]\n",
        "df_merge.groupby('actor_name').sum().sort_values('revenue', ascending=False)['revenue'].head(7).plot(kind='bar')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "OYIFDY8W1FC6",
        "outputId": "800b13b4-5308-4cad-c168-6a784bfbaf19"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Гипотеза про актеров 2\n",
        "actor_budget = df_merge.groupby('actor_name')['budget'].mean().reset_index()\n",
        "actor_budget = actor_budget.sort_values('budget', ascending=False)\n",
        "actor_budget.head(5)"
      ],
      "metadata": {
        "id": "xc_On-XZwsa3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "73ae3027-1d9b-47d3-e9ca-c5c380c8a9a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           actor_name         budget\n",
              "1685        Ben Burtt 180,000,000.00\n",
              "12468      Neel Sethi 175,000,000.00\n",
              "13876   Raymond Ochoa 175,000,000.00\n",
              "16255   Taylor Kitsch 161,333,333.33\n",
              "15579  Skandar Keynes 155,000,000.00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f8720a6f-c6b5-4a3e-a96a-1d0a0847e82a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>actor_name</th>\n",
              "      <th>budget</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1685</th>\n",
              "      <td>Ben Burtt</td>\n",
              "      <td>180,000,000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12468</th>\n",
              "      <td>Neel Sethi</td>\n",
              "      <td>175,000,000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13876</th>\n",
              "      <td>Raymond Ochoa</td>\n",
              "      <td>175,000,000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16255</th>\n",
              "      <td>Taylor Kitsch</td>\n",
              "      <td>161,333,333.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15579</th>\n",
              "      <td>Skandar Keynes</td>\n",
              "      <td>155,000,000.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8720a6f-c6b5-4a3e-a96a-1d0a0847e82a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f8720a6f-c6b5-4a3e-a96a-1d0a0847e82a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f8720a6f-c6b5-4a3e-a96a-1d0a0847e82a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ddacb132-b9f5-4678-9dc1-6acf7c3214ad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ddacb132-b9f5-4678-9dc1-6acf7c3214ad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ddacb132-b9f5-4678-9dc1-6acf7c3214ad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "actor_budget",
              "summary": "{\n  \"name\": \"actor_budget\",\n  \"rows\": 18038,\n  \"fields\": [\n    {\n      \"column\": \"actor_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18038,\n        \"samples\": [\n          \"Bajram Severdzhan\",\n          \"Katerina Tsavalou\",\n          \"Georgiy Deliev\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"budget\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7995588.484367734,\n        \"min\": 1.0,\n        \"max\": 180000000.0,\n        \"num_unique_values\": 2283,\n        \"samples\": [\n          7539838.725432545,\n          750.0,\n          20665114.276852686\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top = actor_budget.head(5)"
      ],
      "metadata": {
        "id": "w4AMnas9yK-F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(4, 4))\n",
        "plt.barh(top['actor_name'], top['budget'], color='grey')\n",
        "# plt.xlabel('Бюджет')\n",
        "# plt.ylabel('Актер')\n",
        "# plt.title('Бюджет фильма / актер')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "id": "b5sy0380yR3Y",
        "outputId": "76014fab-fafa-4c17-e744-bc85b18f2a04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "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c3PTM888oxEjRqhcuXKqVq2apkyZonPnzmnw4ME3VGtERITs7Ow0YMAAWSwWjRgx4rI21atXl8lk0ooVK9SpUyeVKVNGe/fuVWJioh5++GFVqlRJmzZt0u+//249nrFjx2rIkCGqVKmSHnnkEZ09e1br16/X888/f0P1AgDuwGB86623NGjQILVt21YVKlTQqFGjCnyK0t/fX23bttUff/yhVq1aXbXPSZMmKT8/XxERETp79qxatGih1atXq2zZsjdcb3h4uOzs7BQREaH8/Hw99thjNturVKmicePGKTo6WgMHDlT//v01atQorV27VjNmzFBWVpaqV6+uadOm6ZFHHpH0z2z0/Pnzmj59uqKiolShQoWbcqkYACCZLJc+A3CXsVgs8vf317PPPlvke3ylXVZWljw9PRUdHS0XF5fiLgdACRQTE1PcJRTJpfe1M2fOyMPD46pt77gZY2H8/vvvWrJkiU6cOHHFzy4CAFCQuzIYK1WqpAoVKujDDz+8KZdDAQClx10ZjHfp1WEAwG1wx31cAwCAW4lgBADAgGAEAMCAYAQAwIBgBADAgGAEAMCAYAQAwIBgBADAgGAEAMCAYAQAwIBgBADAgGAEAMCAYAQAwOCu/aJiXL+ifKEnANwJivK+xowRAAADghEAAAOCEQAAA4IRAAADghEAAAOCEQAAA4IRAAADghEAAAOCEQAAA4IRAAADghEAAAOH4i4AJVdsbKxcXFyKuwwApUhMTExxl8CMEQAAI4IRAAADghEAAAOCEQAAA4IRAAADghEAAAOCEQAAA4IRAAADghEAAAOCEQAAA4IRAAADghEAAAOCEQAAA4IRAAADghEAAAOCEQAAA4IRAAADghEAAAOCsRDat2+vYcOG3ZaxTCaTEhISbstYAIDLFSkYIyMjZTKZZDKZ5OjoqHvvvVcjR47U+fPnb1V9d4y//vpLMTExCggIkLOzsypUqKDevXtr7969xV0aAKAIijxjDA0NVUZGhn799VdNnz5dH3zwgWJiYm5FbXeM3NxcBQcHa968eZowYYIOHDigVatW6e+//1arVq30008/FXeJAIBCKnIwOjs7y9vbW76+vurWrZuCg4O1Zs0a6/ZTp06pX79+qlKlilxdXdWwYUMtXrzYun3BggUqX768cnNzbfrt1q2bIiIiJEljx45VkyZNNG/ePFWrVk1ms1nPPvus8vLyNGXKFHl7e6tSpUr673//a9NHenq6unbtKrPZLA8PD/Xp00e//fabdfulfhcuXKgaNWrI09NTffv21dmzZ61tcnJy1L9/f5nNZvn4+GjatGnXPCczZszQxo0btWLFCvXp00fVq1dXYGCgvvjiC9WtW1eDBw+WxWKxtp83b57q168vZ2dn+fj4aOjQoTb9nTx5Ut27d5erq6v8/f311Vdf2WxPTk5WYGCgdf/o6Gj9/fff1u3ffPON7r//fnl5eal8+fLq0qWL0tLSrlh/bm6usrKybBYAKK1u6B7jnj17tGHDBjk5OVnXnT9/Xs2bN9fKlSu1Z88ePfXUU4qIiNDmzZslSb1791ZeXp7Nm31mZqZWrlypQYMGWdelpaXp66+/1jfffKPFixdr7ty56ty5s44ePark5GRNnjxZr776qjZt2iRJys/PV9euXfXHH38oOTlZa9as0a+//qrHHnvMpua0tDQlJCRoxYoVWrFihZKTkzVp0iTr9hEjRig5OVnLly/Xt99+q6SkJG3btu2q5+GTTz5Rx44d1bhxY5v1dnZ2Gj58uPbt26edO3dKkt577z0999xzeuqpp7R792599dVXqlWrls1+48aNU58+fbRr1y516tRJ4eHh+uOPPyRJx44dU6dOndSyZUvt3LlT7733nubOnasJEyZY98/JydFLL72kn3/+WYmJibKzs1P37t2Vn59fYP2xsbHy9PS0Lr6+vlc9XgC4mzkUdYcVK1bIbDbr77//Vm5uruzs7DRr1izr9ipVqigqKsr6+vnnn9fq1av16aefKjAwUGXKlNHjjz+uuLg49e7dW5K0aNEiVatWTe3bt7ful5+fr3nz5snd3V316tVThw4dtH//fq1atUp2dnaqXbu2Jk+erB9++EGtWrVSYmKidu/erYMHD1rf2BcsWKD69etry5YtatmypbXf+Ph4ubu7S5IiIiKUmJio//73v8rOztbcuXO1aNEiPfTQQ5Kk+fPnq2rVqlc9JwcOHFCHDh0K3Fa3bl1rmyZNmmjChAl6+eWX9eKLL1rbXKrtksjISPXr10+SNHHiRM2cOVObN29WaGio3n33Xfn6+mrWrFkymUyqU6eOjh8/rlGjRun111+XnZ2devbsadPfvHnzVLFiRe3bt08NGjS4rMbRo0frpZdesr7OysoiHAGUWkUOxg4d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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}